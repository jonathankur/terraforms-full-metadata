/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StructureLevelStruct = {
  levelNumber: BigNumberish;
  tokensOnLevel: BigNumberish;
  structureSpaceX: BigNumberish;
  structureSpaceY: BigNumberish;
  structureSpaceZ: BigNumberish;
};

export type StructureLevelStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  levelNumber: BigNumber;
  tokensOnLevel: BigNumber;
  structureSpaceX: BigNumber;
  structureSpaceY: BigNumber;
  structureSpaceZ: BigNumber;
};

export type TokenDataStruct = {
  tokenId: BigNumberish;
  level: BigNumberish;
  xCoordinate: BigNumberish;
  yCoordinate: BigNumberish;
  elevation: BigNumberish;
  structureSpaceX: BigNumberish;
  structureSpaceY: BigNumberish;
  structureSpaceZ: BigNumberish;
  zoneName: string;
  zoneColors: string[];
  characterSet: string[];
};

export type TokenDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  string[]
] & {
  tokenId: BigNumber;
  level: BigNumber;
  xCoordinate: BigNumber;
  yCoordinate: BigNumber;
  elevation: BigNumber;
  structureSpaceX: BigNumber;
  structureSpaceY: BigNumber;
  structureSpaceZ: BigNumber;
  zoneName: string;
  zoneColors: string[];
  characterSet: string[];
};

export interface TerraformsInterface extends utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "OWNER_ALLOTMENT()": FunctionFragment;
    "PRICE()": FunctionFragment;
    "REVEAL_TIMESTAMP()": FunctionFragment;
    "SUPPLY()": FunctionFragment;
    "TOKEN_SCALE()": FunctionFragment;
    "addTokenURIAddress(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeDreamer(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "commitDreamToCanvas(uint256,uint256[16])": FunctionFragment;
    "dreamers()": FunctionFragment;
    "earlyMint(uint256)": FunctionFragment;
    "earlyMintActive()": FunctionFragment;
    "enterDream(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintingPaused()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerClaim(address,uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "redeemMintpass()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "seed()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMintpassHolders(address[])": FunctionFragment;
    "setSeed()": FunctionFragment;
    "setTokenURIAddress(uint256[],uint256)": FunctionFragment;
    "structureData(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "terraformsAugmentationsAddress()": FunctionFragment;
    "toggleEarly()": FunctionFragment;
    "togglePause()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenCharacters(uint256)": FunctionFragment;
    "tokenCounter()": FunctionFragment;
    "tokenHTML(uint256)": FunctionFragment;
    "tokenHeightmapIndices(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenSVG(uint256)": FunctionFragment;
    "tokenSupplementalData(uint256)": FunctionFragment;
    "tokenTerrainValues(uint256)": FunctionFragment;
    "tokenToAuthorizedDreamer(uint256)": FunctionFragment;
    "tokenToCanvasData(uint256,uint256)": FunctionFragment;
    "tokenToDreamBlock(uint256)": FunctionFragment;
    "tokenToDreamer(uint256)": FunctionFragment;
    "tokenToPlacement(uint256)": FunctionFragment;
    "tokenToStatus(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenURIAddresses(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ALLOTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVEAL_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SUPPLY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenURIAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeDreamer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "commitDreamToCanvas",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "dreamers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earlyMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterDream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMintpass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintpassHolders",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "setSeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTokenURIAddress",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "structureData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terraformsAugmentationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleEarly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCharacters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHTML",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHeightmapIndices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSVG",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupplementalData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTerrainValues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToAuthorizedDreamer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToCanvasData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToDreamBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToDreamer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPlacement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OWNER_ALLOTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenURIAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDreamer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitDreamToCanvas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dreamers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earlyMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enterDream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemMintpass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintpassHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "structureData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terraformsAugmentationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenHTML", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenHeightmapIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenSVG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupplementalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTerrainValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToAuthorizedDreamer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToCanvasData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToDreamBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToDreamer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPlacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Daydreaming(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Terraformed(uint256,address)": EventFragment;
    "TokensRevealed(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Daydreaming"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Terraformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type DaydreamingEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type DaydreamingEventFilter = TypedEventFilter<DaydreamingEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TerraformedEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; terraformer: string }
>;

export type TerraformedEventFilter = TypedEventFilter<TerraformedEvent>;

export type TokensRevealedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; seed: BigNumber }
>;

export type TokensRevealedEventFilter = TypedEventFilter<TokensRevealedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Terraforms extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TerraformsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    OWNER_ALLOTMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVEAL_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokenURIAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizeDreamer(
      tokenId: BigNumberish,
      authorizedDreamer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    commitDreamToCanvas(
      tokenId: BigNumberish,
      dream: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dreamers(overrides?: CallOverrides): Promise<[BigNumber]>;

    earlyMint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earlyMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    enterDream(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerClaim(
      to: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeemMintpass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seed(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintpassHolders(
      mintpassHolders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURIAddress(
      tokens: BigNumberish[],
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    structureData(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [StructureLevelStructOutput[]] & {
        structure: StructureLevelStructOutput[];
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    terraformsAugmentationsAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    toggleEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenCharacters(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[][]]>;

    tokenCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenHTML(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    tokenHeightmapIndices(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenSupplementalData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokenDataStructOutput] & { result: TokenDataStructOutput }>;

    tokenTerrainValues(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    tokenToAuthorizedDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenToCanvasData(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToDreamBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenToPlacement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    tokenURIAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  OWNER_ALLOTMENT(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  REVEAL_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  addTokenURIAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizeDreamer(
    tokenId: BigNumberish,
    authorizedDreamer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  commitDreamToCanvas(
    tokenId: BigNumberish,
    dream: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dreamers(overrides?: CallOverrides): Promise<BigNumber>;

  earlyMint(
    numTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earlyMintActive(overrides?: CallOverrides): Promise<boolean>;

  enterDream(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    numTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintingPaused(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerClaim(
    to: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  redeemMintpass(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seed(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintpassHolders(
    mintpassHolders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSeed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURIAddress(
    tokens: BigNumberish[],
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  structureData(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StructureLevelStructOutput[]>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  terraformsAugmentationsAddress(overrides?: CallOverrides): Promise<string>;

  toggleEarly(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  togglePause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenCharacters(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[][]>;

  tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

  tokenHTML(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenHeightmapIndices(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenSVG(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenSupplementalData(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokenDataStructOutput>;

  tokenTerrainValues(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  tokenToAuthorizedDreamer(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenToCanvasData(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToDreamBlock(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToDreamer(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenToPlacement(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenURIAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ALLOTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    REVEAL_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenURIAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeDreamer(
      tokenId: BigNumberish,
      authorizedDreamer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    commitDreamToCanvas(
      tokenId: BigNumberish,
      dream: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    dreamers(overrides?: CallOverrides): Promise<BigNumber>;

    earlyMint(
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    earlyMintActive(overrides?: CallOverrides): Promise<boolean>;

    enterDream(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(numTokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintingPaused(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerClaim(
      to: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    redeemMintpass(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintpassHolders(
      mintpassHolders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSeed(overrides?: CallOverrides): Promise<void>;

    setTokenURIAddress(
      tokens: BigNumberish[],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    structureData(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StructureLevelStructOutput[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    terraformsAugmentationsAddress(overrides?: CallOverrides): Promise<string>;

    toggleEarly(overrides?: CallOverrides): Promise<void>;

    togglePause(overrides?: CallOverrides): Promise<void>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCharacters(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[][]>;

    tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenHTML(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenHeightmapIndices(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSVG(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenSupplementalData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokenDataStructOutput>;

    tokenTerrainValues(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    tokenToAuthorizedDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenToCanvasData(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToDreamBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenToPlacement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenURIAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Daydreaming(uint256)"(tokenId?: null): DaydreamingEventFilter;
    Daydreaming(tokenId?: null): DaydreamingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Terraformed(uint256,address)"(
      tokenId?: null,
      terraformer?: null
    ): TerraformedEventFilter;
    Terraformed(tokenId?: null, terraformer?: null): TerraformedEventFilter;

    "TokensRevealed(uint256,uint256)"(
      timestamp?: null,
      seed?: null
    ): TokensRevealedEventFilter;
    TokensRevealed(timestamp?: null, seed?: null): TokensRevealedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ALLOTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    REVEAL_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenURIAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizeDreamer(
      tokenId: BigNumberish,
      authorizedDreamer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    commitDreamToCanvas(
      tokenId: BigNumberish,
      dream: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dreamers(overrides?: CallOverrides): Promise<BigNumber>;

    earlyMint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earlyMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    enterDream(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerClaim(
      to: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemMintpass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintpassHolders(
      mintpassHolders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURIAddress(
      tokens: BigNumberish[],
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    structureData(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    terraformsAugmentationsAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCharacters(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenHTML(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenHeightmapIndices(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSupplementalData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenTerrainValues(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToAuthorizedDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToCanvasData(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToDreamBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToPlacement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ALLOTMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVEAL_TIMESTAMP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenURIAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizeDreamer(
      tokenId: BigNumberish,
      authorizedDreamer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitDreamToCanvas(
      tokenId: BigNumberish,
      dream: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dreamers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyMint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earlyMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterDream(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerClaim(
      to: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemMintpass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintpassHolders(
      mintpassHolders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURIAddress(
      tokens: BigNumberish[],
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    structureData(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terraformsAugmentationsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCharacters(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenHTML(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenHeightmapIndices(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSupplementalData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTerrainValues(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToAuthorizedDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToCanvasData(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToDreamBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToDreamer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToPlacement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURIAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
